// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports, module) {
    var KnowledgeNet, KnowledgeView, Zoomer;
    KnowledgeNet = require('graph/net');
    Zoomer = require('graph/zoomer');
    require('d3');
    return KnowledgeView = (function() {
      function KnowledgeView($elm, data) {
        var _ref;
        this.$elm = $elm;
        this.data = data;
        this.$paper = jQuery('<div></div>').addClass('knowledge-net-paper').appendTo(this.$elm);
        this.CIRCLE_RADIUS = 15;
        _ref = [150, 180], this.NODE_WIDTH = _ref[0], this.NODE_HEIGHT = _ref[1];
        this.width = this.$elm.width();
        this.height = this.$elm.height();
        this.offset_x = 0;
        this.offset_y = 0;
        this.knet = new KnowledgeNet(this.data);
        this.draw();
      }

      KnowledgeView.prototype.draw = function() {
        this._svg();
        this._tree();
        this._links();
        this._nodes();
        this._events();
        this._bar();
        this._bar_events();
        return this._init_pos();
      };

      KnowledgeView.prototype.deal_zoom = function(scale, translate, transition) {
        var g, tx, ty;
        g = transition ? this.graph.transition() : this.graph;
        tx = translate[0] + this.offset_x * scale;
        ty = translate[1];
        g.attr('transform', "translate(" + tx + ", " + ty + ")scale(" + scale + ")");
        this.__set_text_class(scale);
        this.$scale.text("" + (Math.round(scale * 100)) + " %");
        return this.hide_point_info();
      };

      KnowledgeView.prototype._bar = function() {
        this.__bar_zoom();
        this.__bar_count();
        return this.__bar_point_info();
      };

      KnowledgeView.prototype.__bar_zoom = function() {
        this.$bar = jQuery('<div></div>').addClass('bar').appendTo(this.$paper);
        this.$scale = jQuery('<div></div>').addClass('scale').text('100 %').appendTo(this.$bar);
        this.$scale_minus = jQuery('<div></div>').addClass('scale-minus').html("<i class='fa fa-minus'></i>").appendTo(this.$bar);
        return this.$scale_plus = jQuery('<div></div>').addClass('scale-plus').html("<i class='fa fa-plus'></i>").appendTo(this.$bar);
      };

      KnowledgeView.prototype.__bar_count = function() {
        var arc, arcs, colors, common_count, h, inner_radius, outer_radius, start_count, svg, w;
        start_count = this.knet.roots().length;
        common_count = this.knet.points().length - start_count;
        this.$start_point_count = jQuery('<div></div>').addClass('start-points-count').html("<span>起始知识点</span>\n<span class='count'>" + start_count + "</span>").appendTo(this.$bar);
        this.$start_point_count = jQuery('<div></div>').addClass('common-points-count').html("<span>一般知识点</span>\n<span class='count'>" + common_count + "</span>").appendTo(this.$bar);
        this.$count_pie = jQuery('<div></div>').addClass('count-pie').appendTo(this.$bar);
        w = 150;
        h = 150;
        outer_radius = w / 2;
        inner_radius = w / 2.666;
        arc = d3.svg.arc().innerRadius(inner_radius).outerRadius(outer_radius);
        svg = d3.select(this.$count_pie[0]).append('svg').attr({
          'width': w,
          'height': h
        }).style({
          'margin': '25px 0 0 25px'
        });
        if (start_count + common_count === 0) {
          return;
        }
        arcs = svg.selectAll('g.arc').data(d3.layout.pie()([start_count, common_count])).enter().append('g').attr({
          'class': 'arc',
          'transform': "translate(" + outer_radius + ", " + outer_radius + ")"
        });
        colors = ['#FFB43B', '#65B2EF'];
        return arcs.append('path').attr({
          'fill': function(d, i) {
            return colors[i];
          },
          'd': arc
        });
      };

      KnowledgeView.prototype.__bar_point_info = function() {
        return this.$point_info = jQuery('<div></div>').addClass('point-info').html("<h3>创建数组</h3>\n<p>允许的字符的集合</p>\n<div>\n  <span class='depend'>前置知识点：</span>\n  <span class='depend-count'></span>\n</div>").appendTo(this.$paper);
      };

      KnowledgeView.prototype.show_point_info = function(point, elm, direct_depend_count, indirect_depend_count) {
        var $e, dc, desc, l, name, o, o1, t;
        name = point.name;
        desc = point.desc;
        this.$point_info.find('h3').html(name);
        this.$point_info.find('p').html(desc);
        dc = direct_depend_count + indirect_depend_count;
        if (dc === 0) {
          this.$point_info.find('span.depend').hide();
          this.$point_info.find('span.depend-count').html('这是起始知识点');
        } else {
          this.$point_info.find('span.depend').show();
          this.$point_info.find('span.depend-count').html(dc);
        }
        $e = jQuery(elm);
        o = $e.offset();
        o1 = this.$paper.offset();
        l = o.left - o1.left + this.CIRCLE_RADIUS * 2 * this.zoomer.scale + 30;
        t = o.top - o1.top + this.CIRCLE_RADIUS * this.zoomer.scale - 30;
        return this.$point_info.addClass('show').css({
          'left': l,
          'top': t
        });
      };

      KnowledgeView.prototype.hide_point_info = function() {
        return this.$point_info.removeClass('show');
      };

      KnowledgeView.prototype._bar_events = function() {
        this.$scale_minus.on('click', this.zoomer.zoomout);
        return this.$scale_plus.on('click', this.zoomer.zoomin);
      };

      KnowledgeView.prototype._svg = function() {
        this.zoomer = new Zoomer(this);
        return this.graph = this.zoomer.handle_svg.append('g');
      };

      KnowledgeView.prototype.__set_text_class = function(scale) {
        var klass;
        klass = ['name'];
        if (scale < 0.75) {
          klass.push('hide');
        }
        return this.name_texts.attr({
          'class': klass.join(' ')
        });
      };

      KnowledgeView.prototype._tree = function() {
        var imarginay_root, tree;
        this.tree_data = this.knet.get_tree_nesting_data();
        imarginay_root = {
          children: this.tree_data.roots
        };
        tree = d3.layout.tree().nodeSize([this.NODE_WIDTH, this.NODE_HEIGHT]);
        this.dataset_nodes = tree.nodes(imarginay_root).slice(1);
        return this.dataset_edges = this.tree_data.edges;
      };

      KnowledgeView.prototype._links = function() {
        return this.links = this.graph.selectAll('.link').data(this.dataset_edges).enter().append('path').attr({
          'd': d3.svg.diagonal(),
          'class': 'link'
        });
      };

      KnowledgeView.prototype._nodes = function() {
        this.nodes = this.graph.selectAll('.node').data(this.dataset_nodes).enter().append('g').attr({
          'class': 'node',
          'transform': function(d) {
            return "translate(" + d.x + ", " + d.y + ")";
          }
        });
        this.circles = this.nodes.append('circle').attr({
          'r': this.CIRCLE_RADIUS,
          'class': (function(_this) {
            return function(d) {
              var klass;
              klass = [];
              if (d.depth === 1) {
                klass.push('start-point');
              }
              return klass.join(' ');
            };
          })(this)
        });
        this.name_texts = this.nodes.append('text').attr({
          'y': 45,
          'text-anchor': 'middle'
        }).each(function(d, i) {
          var dy, j, str, _i, _len, _ref, _results;
          _ref = KnowledgeNet.break_text(d.name);
          _results = [];
          for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
            str = _ref[j];
            dy = j === 0 ? '0' : '1.5em';
            _results.push(d3.select(this).append('tspan').attr({
              'x': 0,
              'dy': dy
            }).text(str));
          }
          return _results;
        });
        return this.__set_text_class(1);
      };

      KnowledgeView.prototype._init_pos = function() {
        var first_node;
        if (this.tree_data.roots.length) {
          first_node = this.tree_data.roots[0];
          this.offset_x = -first_node.x + this.width * 0.3;
        } else {
          this.offset_x = this.width * 0.3;
        }
        return this.zoomer.scaleto(0.75);
      };

      KnowledgeView.prototype._events = function() {
        var that;
        that = this;
        return this.circles.on('mouseover', function(d, i) {
          var d0, depend_point_ids, direct_depend_count, dr, id, links, parent, stack, _i, _len, _ref, _ref1;
          links = that.links.filter(function(link) {
            return link.target.id === d.id;
          });
          links.attr({
            'class': 'link direct-depend'
          });
          d0 = that.knet.find_by(d.id);
          stack = d0.parents.map(function(id) {
            return that.knet.find_by(id);
          });
          depend_point_ids = [];
          while (stack.length > 0) {
            dr = stack.shift();
            _ref = dr.parents;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              parent = that.knet.find_by(id);
              stack.push(parent);
              if (_ref1 = parent.id, __indexOf.call(depend_point_ids, _ref1) < 0) {
                depend_point_ids.push(parent.id);
              }
            }
            that.links.filter(function(link) {
              return link.target.id === dr.id;
            }).attr({
              'class': 'link depend'
            });
          }
          that.circles.filter(function(c) {
            var _ref2, _ref3;
            return (_ref2 = c.id, __indexOf.call(depend_point_ids, _ref2) >= 0) || (_ref3 = c.id, __indexOf.call(d0.parents, _ref3) >= 0);
          }).attr({
            'class': function(d) {
              if (d.depth === 1) {
                return 'start-point';
              }
              return 'depend';
            }
          });
          direct_depend_count = links[0].length;
          return that.show_point_info(d, this, direct_depend_count, depend_point_ids.length);
        }).on('mouseout', function(d) {
          that.links.attr({
            'class': 'link'
          });
          that.circles.attr({
            'class': function(d) {
              if (d.depth === 1) {
                return 'start-point';
              }
            }
          });
          return that.hide_point_info();
        }).on('click', function(d) {});
      };

      return KnowledgeView;

    })();
  });

}).call(this);

//# sourceMappingURL=view.map
