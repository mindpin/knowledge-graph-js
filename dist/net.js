// Generated by CoffeeScript 1.7.1
(function() {
  var KnowledgeNet, edge_equal, union_arrays,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports, module) {
    return KnowledgeNet;
  });

  edge_equal = function(e1, e2) {
    return e1[0] === e2[0] && e1[1] === e2[1];
  };

  union_arrays = function(arr1, arr2) {
    var i, j, k, re, _i, _j, _len, _len1, _results;
    re = {};
    for (_i = 0, _len = arr1.length; _i < _len; _i++) {
      i = arr1[_i];
      re[i] = i;
    }
    for (_j = 0, _len1 = arr2.length; _j < _len1; _j++) {
      j = arr2[_j];
      re[j] = j;
    }
    _results = [];
    for (k in re) {
      _results.push(k);
    }
    return _results;
  };

  KnowledgeNet = (function() {
    function KnowledgeNet(json_obj) {
      var child, child_id, e, p, parent, parent_id, _i, _j, _len, _len1, _ref, _ref1;
      this._points_map = {};
      this._edges = [];
      this.cleaned = false;
      _ref = json_obj['points'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        this._points_map[p.id] = {
          id: p.id,
          name: p.name,
          desc: p.desc,
          edges: [],
          parents: [],
          children: []
        };
      }
      _ref1 = json_obj['edges'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        e = _ref1[_j];
        parent_id = e['parent'];
        child_id = e['child'];
        if (parent_id === child_id) {
          console.log("发现自指向关联 " + (JSON.stringify(e)) + "。自动剔除。");
          continue;
        }
        this._edges.push([parent_id, child_id]);
        parent = this.find_by(parent_id);
        child = this.find_by(child_id);
        parent['edges'].push([parent_id, child_id]);
        parent['children'].push(child_id);
        child['edges'].push([parent_id, child_id]);
        child['parents'].push(parent_id);
      }
    }

    KnowledgeNet.prototype.find_by = function(id) {
      return this._points_map[id];
    };

    KnowledgeNet.prototype.points = function() {
      var id;
      return this._points != null ? this._points : this._points = (function() {
        var _results;
        _results = [];
        for (id in this._points_map) {
          _results.push(id);
        }
        return _results;
      }).call(this);
    };

    KnowledgeNet.prototype.edges = function() {
      return this._edges;
    };

    KnowledgeNet.prototype.roots = function() {
      var id;
      return this._roots != null ? this._roots : this._roots = (function() {
        var _results;
        _results = [];
        for (id in this._points_map) {
          if (this.is_root(id)) {
            _results.push(id);
          }
        }
        return _results;
      }).call(this);
    };

    KnowledgeNet.prototype.is_root = function(id) {
      return this.find_by(id).parents.length === 0;
    };

    KnowledgeNet.prototype.get_redundant_edges = function() {
      var ancestors, another_parent_id, arr, child, child_id, deep, id, loaded, parent, parent_id, point, re, _deep, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      re = [];
      loaded = [];
      arr = (function() {
        var _i, _len, _ref, _results;
        _ref = this.roots();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          id = _ref[_i];
          _results.push(id);
        }
        return _results;
      }).call(this);
      while (arr.length > 0) {
        id = arr.shift();
        point = this.find_by(id);
        loaded.push(id);
        ancestors = [];
        deep = 1;
        _ref = point.parents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          parent_id = _ref[_i];
          parent = this.find_by(parent_id);
          _deep = parent.deep + 1;
          if (_deep > deep) {
            deep = _deep;
          }
          _ref1 = point.parents;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            another_parent_id = _ref1[_j];
            if (parent_id !== another_parent_id) {
              if (parent.ancestors.indexOf(another_parent_id) > -1) {
                re.push([another_parent_id, id]);
              }
            }
          }
          ancestors = union_arrays(ancestors, [parent_id]);
          ancestors = union_arrays(ancestors, parent.ancestors);
        }
        point.ancestors = ancestors;
        point.deep = deep;
        _ref2 = point.children;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          child_id = _ref2[_k];
          child = this.find_by(child_id);
          if (this._is_parents_in_arr(child, loaded)) {
            arr.push(child_id);
          }
        }
      }
      return re;
    };

    KnowledgeNet.prototype._is_parents_in_arr = function(point, arr) {
      var parent_id, _i, _len, _ref;
      _ref = point.parents;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parent_id = _ref[_i];
        if (!(__indexOf.call(arr, parent_id) >= 0)) {
          return false;
        }
      }
      return true;
    };

    KnowledgeNet.prototype.clean_redundant_edges = function() {
      var edge, _i, _len, _ref;
      if (!this.cleaned) {
        _ref = this.get_redundant_edges();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edge = _ref[_i];
          this.clean_edge(edge);
        }
        return this.cleaned = true;
      }
    };

    KnowledgeNet.prototype.clean_edge = function(edge) {
      var child, child_id, parent, parent_id;
      parent_id = edge[0], child_id = edge[1];
      parent = this.find_by(parent_id);
      child = this.find_by(child_id);
      parent.children = parent.children.filter(function(id) {
        return id !== child_id;
      });
      parent.edges = parent.edges.filter(function(e) {
        return !edge_equal(e, edge);
      });
      child.parents = child.parents.filter(function(id) {
        return id !== parent_id;
      });
      child.edges = child.edges.filter(function(e) {
        return !edge_equal(e, edge);
      });
      return this._edges = this._edges.filter(function(e) {
        return !edge_equal(e, edge);
      });
    };

    KnowledgeNet.prototype.get_deeps = function() {
      var id, point, re, _i, _len, _ref;
      this.clean_redundant_edges();
      re = {};
      _ref = this.points();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        point = this.find_by(id);
        re[id] = point.deep;
      }
      return re;
    };

    KnowledgeNet.prototype.get_tree_data = function() {
      var arr, edges, id, pid, point, stack, _i, _j, _len, _len1;
      this.clean_redundant_edges();
      arr = this.__deeps_arr();
      stack = [];
      edges = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        id = arr[_i];
        point = this.find_by(id);
        for (_j = 0, _len1 = stack.length; _j < _len1; _j++) {
          pid = stack[_j];
          if (__indexOf.call(point.parents, pid) >= 0) {
            edges.push([pid, id]);
            break;
          }
        }
        stack.unshift(id);
      }
      return {
        'points': arr,
        'edges': edges
      };
    };

    KnowledgeNet.prototype.get_tree_nesting_data = function() {
      var arr, e, edges, id, map, pid, point, re, source, stack, target, _i, _j, _k, _len, _len1, _len2;
      this.clean_redundant_edges();
      arr = this.__deeps_arr();
      map = {};
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        id = arr[_i];
        point = this.find_by(id);
        map[id] = {
          id: point.id,
          name: point.name,
          desc: point.desc,
          children: [],
          deep: point.deep
        };
      }
      stack = [];
      for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
        id = arr[_j];
        point = this.find_by(id);
        for (_k = 0, _len2 = stack.length; _k < _len2; _k++) {
          pid = stack[_k];
          if (__indexOf.call(point.parents, pid) >= 0) {
            map[pid].children.push(map[id]);
            break;
          }
        }
        stack.unshift(id);
      }
      re = (function() {
        var _l, _len3, _ref, _results;
        _ref = this.roots();
        _results = [];
        for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
          id = _ref[_l];
          this.__count(map, id);
          _results.push(map[id]);
        }
        return _results;
      }).call(this);
      edges = (function() {
        var _l, _len3, _ref, _results;
        _ref = this.edges();
        _results = [];
        for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
          e = _ref[_l];
          source = map[e[0]];
          target = map[e[1]];
          _results.push({
            "source": source,
            "target": target
          });
        }
        return _results;
      }).call(this);
      return {
        "roots": re.sort(function(a, b) {
          return b.count - a.count;
        }),
        "edges": edges
      };
    };

    KnowledgeNet.prototype.__count = function(map, pid) {
      var child_id, map_point, o_point, _i, _len, _ref;
      map_point = map[pid];
      o_point = this.find_by(pid);
      if (!map_point.count) {
        map_point.count = 1;
        _ref = o_point.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child_id = _ref[_i];
          map_point.count += this.__count(map, child_id);
        }
      }
      return map_point.count;
    };

    KnowledgeNet.prototype.__deeps_arr = function() {
      return this.__points_order_by_deeps();
    };

    KnowledgeNet.prototype.__points_order_by_deeps = function() {
      var id;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.points();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          id = _ref[_i];
          _results.push(this.find_by(id));
        }
        return _results;
      }).call(this)).sort(function(a, b) {
        return a.deep - b.deep;
      }).map(function(p) {
        return p.id;
      });
    };

    KnowledgeNet.break_text = function(text) {
      var arr, length, re, slen, tmp, x, _i, _len;
      arr = this.__split(text);
      length = 0;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        x = arr[_i];
        length += x[1];
      }
      slen = this.__slen(length);
      re = [];
      tmp = ['', 0];
      while (arr.length > 0) {
        if (tmp[1] >= slen) {
          re.push(tmp[0]);
          tmp = ['', 0];
        }
        x = arr.shift();
        tmp[0] += x[0];
        tmp[1] += x[1];
      }
      re.push(tmp[0]);
      return re;
    };

    KnowledgeNet.__split = function(text) {
      var arr, push_stack, re, s, stack, _i, _len;
      arr = text.split('');
      re = [];
      stack = '';
      push_stack = function() {
        if (stack.length > 0) {
          re.push([stack, Math.ceil(stack.length / 2)]);
          return stack = '';
        }
      };
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        s = arr[_i];
        if (s.match(/[\u4e00-\u9fa5]/)) {
          push_stack();
          re.push([s, 1]);
        } else {
          stack = stack + s;
        }
      }
      push_stack();
      return re;
    };

    KnowledgeNet.__slen = function(length) {
      var c;
      c = Math.floor((length - 1) / 6);
      return Math.ceil(length / (c + 1));
    };

    return KnowledgeNet;

  })();

}).call(this);

//# sourceMappingURL=net.map
